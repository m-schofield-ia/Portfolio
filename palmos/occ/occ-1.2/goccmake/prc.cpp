//---------------------------------------------------------------------------

#include <vcl.h>
#include <winsock.h>
#pragma hdrstop

#include <stdio.h>
#include "prc.h"

//---------------------------------------------------------------------------
static unsigned char *occVersion="1.0";
static unsigned char *inMemPrc;
static unsigned int rsrcOffset, dataOffset;

static unsigned long code0000len=24;
static unsigned long code0001len=800;
static unsigned long data0000len=43;
static unsigned long rloc0000len=4;
static unsigned long pref0000len=10;

static unsigned char code0000arr[24]={
	0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x08, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x3F, 0x3C, 0x00, 0x01,
	0xA9, 0xF0
};

unsigned char code0001arr[800]={
	0x00, 0x00, 0x00, 0x01, 0x4E, 0x56, 0xFF, 0xF4, 0x48, 0xE7, 0x1F,
	0x00, 0x48, 0x6E, 0xFF, 0xFC, 0x48, 0x6E, 0xFF, 0xF8, 0x48, 0x6E,
	0xFF, 0xF4, 0x4E, 0x4F, 0xA0, 0x8F, 0x4F, 0xEF, 0x00, 0x0C, 0x4A,
	0x40, 0x67, 0x0E, 0x1F, 0x3C, 0x00, 0x03, 0x4E, 0x4F, 0xA2, 0x34,
	0x70, 0xFF, 0x60, 0x00, 0x00, 0x62, 0x20, 0x6E, 0xFF, 0xF4, 0x3C,
	0x10, 0x2A, 0x28, 0x00, 0x02, 0x38, 0x28, 0x00, 0x06, 0x36, 0x04,
	0x02, 0x43, 0x00, 0x04, 0x67, 0x04, 0x61, 0x00, 0x01, 0x4E, 0x3F, 
	0x04, 0x2F, 0x05, 0x3F, 0x06, 0x61, 0x00, 0x01, 0x94, 0x50, 0x8F, 
	0x4A, 0x43, 0x67, 0x04, 0x61, 0x00, 0x02, 0x26, 0x3F, 0x04, 0x2F,
	0x05, 0x3F, 0x06, 0x61, 0x00, 0x00, 0x34, 0x2E, 0x00, 0x50, 0x8F, 
	0x4A, 0x43, 0x67, 0x04, 0x61, 0x00, 0x02, 0x4A, 0x3F, 0x04, 0x2F,
	0x05, 0x3F, 0x06, 0x61, 0x00, 0x01, 0xB8, 0x2F, 0x2E, 0xFF, 0xFC, 
	0x2F, 0x2E, 0xFF, 0xF8, 0x2F, 0x2E, 0xFF, 0xF4, 0x4E, 0x4F, 0xA0,
	0x90, 0x20, 0x07, 0x4C, 0xEE, 0x00, 0xF8, 0xFF, 0xE0, 0x4E, 0x5E, 
	0x4E, 0x75, 0x4E, 0x56, 0xFF, 0xD8, 0x2F, 0x03, 0x4A, 0x6E, 0x00, 
	0x08, 0x66, 0x5A, 0x48, 0x6E, 0xFF, 0xDC, 0x48, 0x6E, 0xFF, 0xDA, 
	0x1F, 0x3C, 0x00, 0x01, 0x2F, 0x3C, 0x63, 0x6C, 0x70, 0x72, 0x2F,
	0x3C, 0x61, 0x70, 0x70, 0x6C, 0x48, 0x6E, 0xFF, 0xE0, 0x1F, 0x3C, 
	0x00, 0x01, 0x4E, 0x4F, 0xA0, 0x78, 0x4F, 0xEF, 0x00, 0x18, 0x4A, 
	0x40, 0x66, 0x2E, 0x61, 0x00, 0x00, 0x36, 0x26, 0x08, 0x67, 0x26,
	0x2F, 0x03, 0x4E, 0x4F, 0xA0, 0x21, 0x2F, 0x08, 0x3F, 0x3C, 0x00, 
	0x36, 0x2F, 0x2E, 0xFF, 0xDC, 0x3F, 0x2E, 0xFF, 0xDA, 0x4E, 0x4F,
	0xA0, 0xA7, 0x4F, 0xEF, 0x00, 0x10, 0x4A, 0x40, 0x67, 0x06, 0x2F,
	0x03, 0x4E, 0x4F, 0xA0, 0x2B, 0x70, 0x00, 0x26, 0x2E, 0xFF, 0xD4, 
	0x4E, 0x5E, 0x4E, 0x75, 0x4E, 0x56, 0x00, 0x00, 0x48, 0xE7, 0x1E,
	0x20, 0x3F, 0x3C, 0x00, 0x64, 0x2F, 0x3C, 0x74, 0x53, 0x54, 0x52, 
	0x4E, 0x4F, 0xA0, 0x5F, 0x2A, 0x08, 0x5C, 0x8F, 0x66, 0x06, 0x91, 
	0xC8, 0x60, 0x00, 0x00, 0x62, 0x2F, 0x05, 0x4E, 0x4F, 0xA0, 0x21,
	0x2C, 0x08, 0x2F, 0x06, 0x4E, 0x4F, 0xA0, 0xC7, 0x36, 0x00, 0x52, 
	0x43, 0x3F, 0x03, 0x42, 0x67, 0x53, 0x43, 0x4E, 0x4F, 0xA0, 0x1E,
	0x28, 0x08, 0x4F, 0xEF, 0x00, 0x0C, 0x67, 0x2E, 0x2F, 0x04, 0x4E,
	0x4F, 0xA0, 0x21, 0x24, 0x48, 0x42, 0x67, 0x2F, 0x0A, 0x4E, 0x4F, 
	0xA0, 0x1B, 0x02, 0x83, 0x00, 0x00, 0xFF, 0xFF, 0x2F, 0x03, 0x2F,
	0x06, 0x2F, 0x0A, 0x4E, 0x4F, 0xA0, 0x26, 0x42, 0x32, 0x38, 0x00, 
	0x2F, 0x04, 0x4E, 0x4F, 0xA0, 0x22, 0x4F, 0xEF, 0x00, 0x1A, 0x2F, 
	0x05, 0x4E, 0x4F, 0xA0, 0x22, 0x2F, 0x05, 0x4E, 0x4F, 0xA0, 0x61, 
	0x20, 0x44, 0x4C, 0xEE, 0x04, 0x78, 0xFF, 0xEC, 0x4E, 0x5E, 0x4E, 
	0x75, 0x4E, 0x56, 0x00, 0x00, 0x48, 0xE7, 0x10, 0x30, 0x42, 0x67, 
	0x2F, 0x3C, 0x72, 0x6C, 0x6F, 0x63, 0x4E, 0x4F, 0xA0, 0x60, 0x26, 
	0x08, 0x5C, 0x8F, 0x67, 0x2A, 0x2F, 0x03, 0x4E, 0x4F, 0xA0, 0x21,
	0x26, 0x48, 0x48, 0x6D, 0x00, 0x00, 0x3F, 0x1B, 0x45, 0xFA, 0x01,
	0x36, 0x4E, 0x92, 0x41, 0xFA, 0xFE, 0x3C, 0x2F, 0x08, 0x3F, 0x13,
	0x4E, 0x92, 0x2F, 0x03, 0x4E, 0x4F, 0xA0, 0x22, 0x2F, 0x03, 0x4E, 
	0x4F, 0xA0, 0x61, 0x4C, 0xEE, 0x0C, 0x08, 0xFF, 0xF4, 0x4E, 0x5E,
	0x4E, 0x75, 0x00, 0x00, 0x4E, 0x56, 0x00, 0x00, 0x48, 0xE7, 0x1C,
	0x38, 0x3A, 0x2E, 0x00, 0x08, 0x28, 0x2E, 0x00, 0x0A, 0x36, 0x2E, 
	0x00, 0x0E, 0x45, 0xFA, 0xFE, 0x06, 0x95, 0xFC, 0x00, 0x00, 0x00,
	0x00, 0x47, 0xF9, 0x00, 0x00, 0x03, 0x1C, 0xD7, 0xCA, 0x49, 0xF9, 
	0x00, 0x00, 0x03, 0x1C, 0xD9, 0xCA, 0xB9, 0xCB, 0x63, 0x12, 0x20,
	0x5B, 0xD1, 0xCA, 0x3F, 0x03, 0x2F, 0x04, 0x3F, 0x05, 0x4E, 0x90, 
	0x50, 0x8F, 0xB9, 0xCB, 0x62, 0xEE, 0x4C, 0xEE, 0x1C, 0x38, 0xFF, 
	0xE8, 0x4E, 0x5E, 0x4E, 0x75, 0x4E, 0x56, 0x00, 0x00, 0x48, 0xE7, 
	0x1C, 0x38, 0x3A, 0x2E, 0x00, 0x08, 0x28, 0x2E, 0x00, 0x0A, 0x36,
	0x2E, 0x00, 0x0E, 0x47, 0xFA, 0xFD, 0xB8, 0x97, 0xFC, 0x00, 0x00, 
	0x00, 0x00, 0x49, 0xF9, 0x00, 0x00, 0x03, 0x1C, 0xD9, 0xCB, 0x45,
	0xF9, 0x00, 0x00, 0x03, 0x1C, 0xD5, 0xCB, 0xB9, 0xCA, 0x64, 0x12, 
	0x20, 0x62, 0xD1, 0xCB, 0x3F, 0x03, 0x2F, 0x04, 0x3F, 0x05, 0x4E,
	0x90, 0x50, 0x8F, 0xB9, 0xCA, 0x65, 0xEE, 0x4C, 0xEE, 0x1C, 0x38, 
	0xFF, 0xE8, 0x4E, 0x5E, 0x4E, 0x75, 0x4E, 0x56, 0x00, 0x00, 0x48, 
	0xE7, 0x00, 0x38, 0x47, 0xFA, 0xFD, 0x76, 0x97, 0xFC, 0x00, 0x00, 
	0x00, 0x00, 0x45, 0xF9, 0x00, 0x00, 0x03, 0x1C, 0xD5, 0xCB, 0x49, 
	0xF9, 0x00, 0x00, 0x03, 0x1C, 0xD9, 0xCB, 0xB9, 0xCA, 0x63, 0x0A,
	0x20, 0x5A, 0xD1, 0xCB, 0x4E, 0x90, 0xB9, 0xCA, 0x62, 0xF6, 0x4C, 
	0xEE, 0x1C, 0x00, 0xFF, 0xF4, 0x4E, 0x5E, 0x4E, 0x75, 0x4E, 0x56,
	0x00, 0x00, 0x48, 0xE7, 0x00, 0x38, 0x47, 0xFA, 0xFD, 0x3C, 0x97,
	0xFC, 0x00, 0x00, 0x00, 0x00, 0x49, 0xF9, 0x00, 0x00, 0x03, 0x1C,
	0xD9, 0xCB, 0x45, 0xF9, 0x00, 0x00, 0x03, 0x1C, 0xD5, 0xCB, 0xB9,
	0xCA, 0x64, 0x0A, 0x20, 0x62, 0xD1, 0xCB, 0x4E, 0x90, 0xB9, 0xCA,
	0x65, 0xF6, 0x4C, 0xEE, 0x1C, 0x00, 0xFF, 0xF4, 0x4E, 0x5E, 0x4E,
	0x75, 0x4E, 0x56, 0x00, 0x00, 0x30, 0x2E, 0x00, 0x08, 0x22, 0x2E,
	0x00, 0x0A, 0x43, 0xED, 0x00, 0x00, 0x4A, 0x40, 0x6D, 0x0E, 0x41,
	0xF1, 0x00, 0x00, 0x30, 0x10, 0x42, 0x50, 0xD3, 0x90, 0x4A, 0x40,
	0x6C, 0xF2, 0x4E, 0x5E, 0x4E, 0x75, 0x00, 0x00
};

unsigned char data0000arr[43]={
	0x00, 0x00, 0x00, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

unsigned char rloc0000arr[4]={
	0xFF, 0xFF, 0xFF, 0xFF
};

static unsigned char pref0000arr[10]={
	0x00, 0x1E, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10, 0x00
};

//---------------------------------------------------------------------------
#pragma package(smart_init)

//---------------------------------------------------------------------------
static void
prcPush(unsigned int seg,
        unsigned short id,
        unsigned char *src,
        unsigned long len)
{
        unsigned char *p=inMemPrc+rsrcOffset;

        *p++=(seg>>24)&0xff;
        *p++=(seg>>16)&0xff;
        *p++=(seg>>8)&0xff;
        *p++=seg&0xff;

        *p++=(id>>8)&0xff;
        *p++=id&0xff;

        *p++=(dataOffset>>24)&0xff;
        *p++=(dataOffset>>16)&0xff;
        *p++=(dataOffset>>8)&0xff;
        *p=dataOffset&0xff;

        memmove(inMemPrc+dataOffset, src, len);

        dataOffset+=len;
        rsrcOffset+=RSRCENTRYLEN;
}

//---------------------------------------------------------------------------
unsigned char *
prcBuild(unsigned char *nameInPrc,
         unsigned char *url,
         unsigned char *largeBitmap,
         unsigned char *smallBitmap,
         unsigned int largeBitmapLen,
         unsigned int smallBitmapLen,
         bool makeExe,
         unsigned int *dstPrcLen)
{
        int prcLen=largeBitmapLen+smallBitmapLen;
        int now=time(NULL)+2082844800L;
        unsigned int urlLen, occVersionLen, numRes;
        DatabaseHdrType *dbHeader;

        rsrcOffset=DATABASEHDRLEN;
        occVersionLen=strlen(occVersion);
        urlLen=strlen(url);

        if (makeExe==true) {
                numRes=9;       // code0+1 data pref rloc taib0+1 tver tstr
                prcLen+=code0000len+code0001len+data0000len+pref0000len+rloc0000len;
        } else
                numRes=4;       // taib0+1 tver tstr

        prcLen+=occVersionLen+1;
        prcLen+=urlLen+1;
        prcLen+=(numRes*RSRCENTRYLEN)+DATABASEHDRLEN;
        prcLen+=PADBYTES;

        inMemPrc=new char[prcLen];

        dbHeader=(DatabaseHdrType *)inMemPrc;
        strncpy(dbHeader->name, nameInPrc, dmDBNameLength-1);

        if (makeExe==true) {
                // AttrBackup | AttrResDB
                dbHeader->attributes=htons(0x0009);
                dbHeader->type=htonl(MAKE32('a','p','p','l'));
        } else {
                // LaunchableData | AttrBackup | AttrResDB
                dbHeader->attributes=htons(0x0209);
                dbHeader->type=htonl(MAKE32('o','c','c',' '));
        }

        dbHeader->creator=htonl(CREATORID);
        dbHeader->creationDate=htonl(now);
        dbHeader->modificationDate=htonl(now);
        dbHeader->recordList.numRecords=htons(numRes);

        dataOffset=DATABASEHDRLEN+(numRes*RSRCENTRYLEN)+PADBYTES;

        if (makeExe==true) {
                prcPush(MAKE32('c','o','d','e'), 0, code0000arr, code0000len);
                prcPush(MAKE32('c','o','d','e'), 1, code0001arr, code0001len);
                prcPush(MAKE32('d','a','t','a'), 0, data0000arr, data0000len);
                prcPush(MAKE32('p','r','e','f'), 0, pref0000arr, pref0000len);
                prcPush(MAKE32('r','l','o','c'), 0, rloc0000arr, rloc0000len);
        }

        prcPush(MAKE32('t','A','I','B'), 1000, largeBitmap, largeBitmapLen);
        prcPush(MAKE32('t','A','I','B'), 1001, smallBitmap, smallBitmapLen);
        prcPush(MAKE32('t','S','T','R'), URLID, url, urlLen);
        dataOffset++;
        prcPush(MAKE32('t','v','e','r'), 1, occVersion, occVersionLen);
        dataOffset++;

        *dstPrcLen=dataOffset;
        return inMemPrc;
}

//---------------------------------------------------------------------------
bool
prcSave(char *prcName,
        unsigned char *prc,
        unsigned int len)
{
        FILE *fh;
        unsigned int wLen;

        if ((fh=fopen(prcName, "wb+"))!=NULL) {
                wLen=fwrite(prc, 1, len, fh);
                fclose(fh);
                if (wLen==len)
                        return true;
        }

        return false;
}
